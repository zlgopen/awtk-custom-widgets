[
  {
    "type": "enum",
    "desc": "控件的属性。",
    "consts": [
      {
        "desc": "坐标轴的类型",
        "name": "AXIS_PROP_TYPE"
      },
      {
        "desc": "坐标轴的位置",
        "name": "AXIS_PROP_AT"
      },
      {
        "desc": "坐标轴的偏移",
        "name": "AXIS_PROP_OFFSET"
      },
      {
        "desc": "坐标轴的刻度数据",
        "name": "AXIS_PROP_DATA"
      },
      {
        "desc": "坐标轴是否反向",
        "name": "AXIS_PROP_INVERSE"
      },
      {
        "desc": "坐标轴上的分割线",
        "name": "AXIS_PROP_SPLIT_LINE"
      },
      {
        "desc": "坐标轴上的分割线是否显示",
        "name": "AXIS_PROP_SPLIT_LINE_SHOW"
      },
      {
        "desc": "坐标轴的轴线",
        "name": "AXIS_PROP_LINE"
      },
      {
        "desc": "坐标轴的轴线是否显示",
        "name": "AXIS_PROP_LINE_SHOW"
      },
      {
        "desc": "坐标轴的刻度线",
        "name": "AXIS_PROP_TICK"
      },
      {
        "desc": "坐标轴的刻度线是否显示",
        "name": "AXIS_PROP_TICK_SHOW"
      },
      {
        "desc": "坐标轴上的刻度值",
        "name": "AXIS_PROP_LABEL"
      },
      {
        "desc": "坐标轴上的刻度值是否显示",
        "name": "AXIS_PROP_LABEL_SHOW"
      },
      {
        "desc": "坐标轴的标题",
        "name": "AXIS_PROP_TITLE"
      },
      {
        "desc": "坐标轴的标题是否显示",
        "name": "AXIS_PROP_TITLE_SHOW"
      },
      {
        "desc": "位于顶层的series的索引",
        "name": "CHART_VIEW_PROP_TOP_SERIES"
      },
      {
        "desc": "序列的容量",
        "name": "SERIES_PROP_CAPACITY"
      },
      {
        "desc": "序列元素的大小",
        "name": "SERIES_PROP_UNIT_SIZE"
      },
      {
        "desc": "序列的偏移位置",
        "name": "SERIES_PROP_OFFSET"
      },
      {
        "desc": "序列的偏移位置的最大值",
        "name": "SERIES_PROP_OFFSET_MAX"
      },
      {
        "desc": "序列的裁剪范围",
        "name": "SERIES_PROP_CLIP_RANGE"
      },
      {
        "desc": "序列的覆盖范围（点数）",
        "name": "SERIES_PROP_COVERAGE"
      },
      {
        "desc": "指示序列位置的轴",
        "name": "SERIES_PROP_SERIES_AXIS"
      },
      {
        "desc": "指示序列值的轴",
        "name": "SERIES_PROP_VALUE_AXIS"
      },
      {
        "desc": "序列的显示模式",
        "name": "SERIES_PROP_DISPLAY_MODE"
      },
      {
        "desc": "序列值动画的持续时间",
        "name": "SERIES_PROP_VALUE_ANIMATION"
      },
      {
        "desc": "序列新周期部分的点数",
        "name": "SERIES_PROP_NEW_PERIOD"
      },
      {
        "desc": "序列的标题",
        "name": "SERIES_PROP_TITLE"
      },
      {
        "desc": "序列形成的曲线",
        "name": "SERIES_PROP_LINE"
      },
      {
        "desc": "序列形成的曲线是否显示",
        "name": "SERIES_PROP_LINE_SHOW"
      },
      {
        "desc": "序列形成的曲线是否平滑显示",
        "name": "SERIES_PROP_LINE_SMOOTH"
      },
      {
        "desc": "序列的曲线与轴围成的区域",
        "name": "SERIES_PROP_LINE_AREA"
      },
      {
        "desc": "序列的曲线与轴围成的区域是否显示",
        "name": "SERIES_PROP_LINE_AREA_SHOW"
      },
      {
        "desc": "序列点的标记",
        "name": "SERIES_PROP_SYMBOL"
      },
      {
        "desc": "序列点的标记的大小",
        "name": "SERIES_PROP_SYMBOL_SIZE"
      },
      {
        "desc": "序列点的标记是否显示",
        "name": "SERIES_PROP_SYMBOL_SHOW"
      },
      {
        "desc": "指示序列值的柱条",
        "name": "SERIES_PROP_BAR"
      },
      {
        "desc": "指示序列值的柱条是否重叠显示",
        "name": "SERIES_PROP_BAR_OVERLAP"
      },
      {
        "desc": "pointer按下时的x坐标",
        "name": "TOOLTIP_PROP_DOWN_X"
      },
      {
        "desc": "pointer按下时的y坐标",
        "name": "TOOLTIP_PROP_DOWN_Y"
      },
      {
        "desc": "指示序列点位置的线",
        "name": "TOOLTIP_PROP_LINE"
      },
      {
        "desc": "指示序列点位置的线是否显示",
        "name": "TOOLTIP_PROP_LINE_SHOW"
      },
      {
        "desc": "指示序列点位置的点",
        "name": "TOOLTIP_PROP_SYMBOL"
      },
      {
        "desc": "指示序列点位置的点是否显示",
        "name": "TOOLTIP_PROP_SYMBOL_SHOW"
      },
      {
        "desc": "提示文本",
        "name": "TOOLTIP_PROP_TIP"
      },
      {
        "desc": "提示文本是否显示",
        "name": "TOOLTIP_PROP_TIP_SHOW"
      }
    ],
    "header": "chart_view/axis_types.h",
    "name": "widget_prop_t",
    "prefix": "AXIS_PROP_",
    "annotation": {
      "scriptable": true,
      "string": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "uint32_t",
            "name": "capacity",
            "desc": "FIFO的初始容量。"
          },
          {
            "type": "uint32_t",
            "name": "unit_size",
            "desc": "FIFO中单个元素的大小。"
          },
          {
            "type": "tk_destroy_t",
            "name": "destroy",
            "desc": "元素销毁函数。"
          },
          {
            "type": "tk_compare_t",
            "name": "compare",
            "desc": "元素比较函数。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建fifo对象。",
        "name": "fifo_create",
        "return": {
          "type": "fifo_t*",
          "desc": "FIFO对象。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          },
          {
            "type": "uint32_t",
            "name": "capacity",
            "desc": "FIFO的初始容量。"
          },
          {
            "type": "uint32_t",
            "name": "unit_size",
            "desc": "FIFO中单个元素的大小。"
          },
          {
            "type": "tk_destroy_t",
            "name": "destroy",
            "desc": "元素销毁函数。"
          },
          {
            "type": "tk_compare_t",
            "name": "compare",
            "desc": "元素比较函数。"
          }
        ],
        "annotation": {},
        "desc": "初始化fifo对象。",
        "name": "fifo_init",
        "return": {
          "type": "fifo_t*",
          "desc": "FIFO对象。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          }
        ],
        "annotation": {},
        "desc": "clone。",
        "name": "fifo_clone",
        "return": {
          "type": "fifo_t*",
          "desc": "返回clone的对象。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          },
          {
            "type": "fifo_t*",
            "name": "index",
            "desc": "被clone元素在FIFO中的位置。"
          },
          {
            "type": "fifo_t*",
            "name": "nr",
            "desc": "被clone元素的数量。"
          }
        ],
        "annotation": {},
        "desc": "clone部分。",
        "name": "fifo_part_clone",
        "return": {
          "type": "fifo_t*",
          "desc": "返回clone的对象。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "元素在缓存区的位置。"
          }
        ],
        "annotation": {},
        "desc": "返回特定（缓存）位置的元素。",
        "name": "fifo_at_abs",
        "return": {
          "type": "void*",
          "desc": "如果找到，返回特定位置的元素，否则返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "元素在FIFO中的位置。"
          }
        ],
        "annotation": {},
        "desc": "返回特定位置的元素。",
        "name": "fifo_at",
        "return": {
          "type": "void*",
          "desc": "如果找到，返回特定位置的元素，否则返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "元素在缓存区的位置。"
          },
          {
            "type": "const void*",
            "name": "data",
            "desc": "元素数据。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "元素数量。"
          }
        ],
        "annotation": {},
        "desc": "设置特定（缓存）位置开始的多个元素。",
        "name": "fifo_set_abs",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "元素在FIFO中的位置。"
          },
          {
            "type": "const void*",
            "name": "data",
            "desc": "元素数据。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "元素数量。"
          }
        ],
        "annotation": {},
        "desc": "设置特定位置开始的多个元素。",
        "name": "fifo_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "元素在缓存区的位置。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "元素数量。"
          },
          {
            "type": "uint8_t*",
            "name": "buffer",
            "desc": "返回元素的缓存。"
          }
        ],
        "annotation": {},
        "desc": "返回特定（缓存）位置开始的多个元素。",
        "name": "fifo_get_abs",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "元素在FIFO中的位置。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "元素数量。"
          },
          {
            "type": "uint8_t*",
            "name": "buffer",
            "desc": "返回元素的缓存。"
          }
        ],
        "annotation": {},
        "desc": "返回特定位置开始的多个元素。",
        "name": "fifo_get",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "当前元素。"
          }
        ],
        "annotation": {},
        "desc": "返回上一个元素。",
        "name": "fifo_prev",
        "return": {
          "type": "void*",
          "desc": "如果找到，返回上一个元素，否则返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "当前元素。"
          }
        ],
        "annotation": {},
        "desc": "返回下一个元素。",
        "name": "fifo_next",
        "return": {
          "type": "void*",
          "desc": "如果找到，返回下一个元素，否则返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          }
        ],
        "annotation": {},
        "desc": "返回最后一个元素。",
        "name": "fifo_tail",
        "return": {
          "type": "void*",
          "desc": "成功返回最后一个元素，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          }
        ],
        "annotation": {},
        "desc": "返回第一个元素。",
        "name": "fifo_head",
        "return": {
          "type": "void*",
          "desc": "成功返回最后一个元素，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          },
          {
            "type": "void*",
            "name": "data",
            "desc": "元素。"
          }
        ],
        "annotation": {},
        "desc": "返回元素的位置。",
        "name": "fifo_index_of",
        "return": {
          "type": "int",
          "desc": "如果找到，返回元素的位置，否则返回-1。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "单向链表对象。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "返回满足条件元素的个数。",
        "name": "fifo_count",
        "return": {
          "type": "int32_t",
          "desc": "返回元素个数。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "查找第一个满足条件的元素。",
        "name": "fifo_find",
        "return": {
          "type": "void*",
          "desc": "如果找到，返回满足条件的对象，否则返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "比较函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "查找第一个满足条件的元素，并返回位置。",
        "name": "fifo_find_index",
        "return": {
          "type": "int",
          "desc": "如果找到，返回满足条件的对象的位置，否则返回-1。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          },
          {
            "type": "const void*",
            "name": "data",
            "desc": "待追加的元素。"
          }
        ],
        "annotation": {},
        "desc": "在尾巴追加一个元素。",
        "name": "fifo_push",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          }
        ],
        "annotation": {},
        "desc": "弹出第一个元素。",
        "name": "fifo_pop",
        "return": {
          "type": "void*",
          "desc": "成功返回第一个元素，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          },
          {
            "type": "const void*",
            "name": "data",
            "desc": "待追加的元素。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "待追加的元素个数。"
          }
        ],
        "annotation": {},
        "desc": "在尾巴追加多个元素。",
        "name": "fifo_npush",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "待弹出的元素个数。"
          }
        ],
        "annotation": {},
        "desc": "弹出开头多个元素。",
        "name": "fifo_npop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          }
        ],
        "annotation": {},
        "desc": "清除全部元素。",
        "name": "fifo_clear",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          },
          {
            "type": "tk_visit_t",
            "name": "visit",
            "desc": "遍历函数。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "遍历函数的上下文。"
          }
        ],
        "annotation": {},
        "desc": "遍历元素。",
        "name": "fifo_foreach",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          }
        ],
        "annotation": {},
        "desc": "清除全部元素，并释放elms。",
        "name": "fifo_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "FIFO对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁fifo对象。",
        "name": "fifo_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "capacity",
        "desc": "FIFO的容量大小。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "size",
        "desc": "FIFO中元素的个数。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "cursor",
        "desc": "FIFO中最后一个元素的索引。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "unit_size",
        "desc": "FIFO中单个元素的大小。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "buffer",
        "desc": "FIFO中的数据缓存。",
        "type": "uint8_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "destroy",
        "desc": "元素销毁函数。",
        "type": "tk_destroy_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "compare",
        "desc": "元素过滤函数。",
        "type": "tk_compare_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/fifo.h",
    "desc": "FIFO，先进先出队列，环形缓存。\n\n用fifo\\_init初始化时，用fifo\\_deinit释放。如：\n\n```c\nfifo_t fifo;\nfifo_init(&fifo, 10, 10, compare);\n...\nfifo_deinit(&fifo);\n```\n\n用fifo\\_create创建时，用fifo\\_destroy销毁。如：\n\n```c\nfifo_t* fifo = fifo_create(10, 10, compare);\n...\nfifo_destroy(fifo);\n```",
    "name": "fifo_t",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "坐标轴类型。",
    "consts": [
      {
        "desc": "种类坐标轴, 用于表示坐标点的类别，坐标点默认在interval内居中。",
        "name": "AXIS_TYPE_CATEGORY"
      },
      {
        "desc": "值坐标轴, 用于表示坐标点的值, 坐标点默认在interval的边缘。",
        "name": "AXIS_TYPE_VALUE"
      }
    ],
    "header": "chart_view/axis_types.h",
    "name": "axis_type_t",
    "prefix": "AXIS_TYPE_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "坐标轴位置。",
    "consts": [
      {
        "desc": "自动选择位置。",
        "name": "AXIS_AT_AUTO"
      },
      {
        "desc": "水平左边。",
        "name": "AXIS_AT_LEFT"
      },
      {
        "desc": "水平右边。",
        "name": "AXIS_AT_RIGHT"
      },
      {
        "desc": "垂直顶部。",
        "name": "AXIS_AT_TOP"
      },
      {
        "desc": "垂直低部。",
        "name": "AXIS_AT_BOTTOM"
      }
    ],
    "header": "chart_view/axis_types.h",
    "name": "axis_at_type_t",
    "prefix": "AXIS_AT_TYPE_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "轴上标尺的刻度值。",
    "consts": [],
    "header": "chart_view/axis_types.h",
    "name": "axis_label_params_t",
    "prefix": "AXIS_LABEL_PARAMS_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "轴上的标题。",
    "consts": [],
    "header": "chart_view/axis_types.h",
    "name": "axis_title_params_t",
    "prefix": "AXIS_TITLE_PARAMS_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "轴上的刻度线。",
    "consts": [],
    "header": "chart_view/axis_types.h",
    "name": "axis_tick_params_t",
    "prefix": "AXIS_TICK_PARAMS_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "轴线。",
    "consts": [],
    "header": "chart_view/axis_types.h",
    "name": "axis_line_params_t",
    "prefix": "AXIS_LINE_PARAMS_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "坐标系上的分割线。",
    "consts": [],
    "header": "chart_view/axis_types.h",
    "name": "axis_split_line_params_t",
    "prefix": "AXIS_SPLIT_LINE_PARAMS_",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "float_t",
            "name": "tick",
            "desc": "刻度位置"
          },
          {
            "type": "const char*",
            "name": "text",
            "desc": "刻度值"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建axis_data对象",
        "name": "axis_data_create",
        "return": {
          "type": "axis_data_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "axis_data_t*",
            "name": "data",
            "desc": "axis_data对象"
          }
        ],
        "annotation": {
          "deconstructor": true,
          "scriptable": true,
          "gc": true
        },
        "desc": "销毁axis_data对象",
        "name": "axis_data_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "chart_view/axis_types.h",
    "desc": "坐标轴上的刻度数据。",
    "name": "axis_data_t",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "params": [],
    "annotation": {
      "global": true
    },
    "desc": "获取支持的渲染模式。",
    "name": "chart_view_supported_render_mode",
    "return": {
      "type": "const char*",
      "desc": "返回渲染模式。"
    },
    "type": "method",
    "header": "src/chart_view_register.h",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "控件的类型。",
    "consts": [
      {
        "desc": "x坐标轴。",
        "name": "WIDGET_TYPE_X_AXIS"
      },
      {
        "desc": "y坐标轴。",
        "name": "WIDGET_TYPE_Y_AXIS"
      },
      {
        "desc": "chart_view。",
        "name": "WIDGET_TYPE_CHART_VIEW"
      },
      {
        "desc": "线形序列。",
        "name": "WIDGET_TYPE_LINE_SERIES"
      },
      {
        "desc": "彩色线形序列。",
        "name": "WIDGET_TYPE_LINE_SERIES_COLORFUL"
      },
      {
        "desc": "柱条序列。",
        "name": "WIDGET_TYPE_BAR_SERIES"
      },
      {
        "desc": "包含最大最小值的柱条序列。",
        "name": "WIDGET_TYPE_BAR_SERIES_MINMAX"
      },
      {
        "desc": "提示信息控件。",
        "name": "WIDGET_TYPE_TOOLTIP"
      }
    ],
    "header": "chart_view/axis_types.h",
    "name": "widget_type_t",
    "prefix": "WIDGET_TYPE_",
    "annotation": {
      "scriptable": true,
      "string": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "style常量定义。",
    "consts": [
      {
        "desc": "坐标轴分割线颜色。",
        "name": "STYLE_ID_AXIS_SPLIT_LINE_COLOR"
      },
      {
        "desc": "坐标轴的图片。",
        "name": "STYLE_ID_AXIS_SPLIT_LINE_IMAGE"
      },
      {
        "desc": "坐标轴刻度线颜色。",
        "name": "STYLE_ID_AXIS_TICK_COLOR"
      },
      {
        "desc": "坐标轴刻度线颜色。",
        "name": "STYLE_ID_AXIS_TICK_IMAGE"
      }
    ],
    "header": "chart_view/axis_types.h",
    "name": "style_id_axis_t",
    "prefix": "STYLE_ID_AXIS_",
    "annotation": {
      "scriptable": true,
      "string": true
    },
    "level": 1
  },
  {
    "params": [],
    "annotation": {
      "global": true
    },
    "desc": "注册控件。",
    "name": "chart_view_register",
    "return": {
      "type": "ret_t",
      "desc": "返回RET_OK表示成功，否则表示失败。"
    },
    "type": "method",
    "header": "src/chart_view_register.h",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "动画持续时间。"
          },
          {
            "type": "uint32_t",
            "name": "delay",
            "desc": "动画执行时间。"
          },
          {
            "type": "easing_type_t",
            "name": "easing",
            "desc": "插值函数类型。"
          },
          {
            "type": "chart_animator_update_t",
            "name": "update",
            "desc": "值更新回调。"
          },
          {
            "type": "tk_destroy_t",
            "name": "",
            "desc": "。"
          },
          {
            "type": "bool_t",
            "name": "should_free_from",
            "desc": "是否释放from数据。"
          },
          {
            "type": "bool_t",
            "name": "should_free_to",
            "desc": "是否释放to数据。"
          },
          {
            "type": "bool_t",
            "name": "should_free_cur",
            "desc": "是否释放cur数据。"
          }
        ],
        "annotation": {},
        "desc": "创建动画对象。",
        "name": "chart_animator_create",
        "return": {
          "type": "widget_animator_t*",
          "desc": "成功返回动画对象，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "动画持续时间。"
          },
          {
            "type": "uint32_t",
            "name": "delay",
            "desc": "动画执行时间。"
          },
          {
            "type": "easing_type_t",
            "name": "easing",
            "desc": "插值函数类型。"
          }
        ],
        "annotation": {},
        "desc": "创建浮点型fifo的值动画对象。",
        "name": "chart_animator_fifo_float_value_create",
        "return": {
          "type": "widget_animator_t*",
          "desc": "成功返回动画对象，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "动画持续时间。"
          },
          {
            "type": "uint32_t",
            "name": "delay",
            "desc": "动画执行时间。"
          },
          {
            "type": "easing_type_t",
            "name": "easing",
            "desc": "插值函数类型。"
          }
        ],
        "annotation": {},
        "desc": "创建彩色型fifo的值动画对象。",
        "name": "chart_animator_fifo_colorful_value_create",
        "return": {
          "type": "widget_animator_t*",
          "desc": "成功返回动画对象，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "duration",
            "desc": "动画持续时间。"
          },
          {
            "type": "uint32_t",
            "name": "delay",
            "desc": "动画执行时间。"
          },
          {
            "type": "easing_type_t",
            "name": "easing",
            "desc": "插值函数类型。"
          }
        ],
        "annotation": {},
        "desc": "创建最大最小型fifo的值动画对象。",
        "name": "chart_animator_fifo_minmax_value_create",
        "return": {
          "type": "widget_animator_t*",
          "desc": "成功返回动画对象，失败返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_animator_t*",
            "name": "animator",
            "desc": "动画对象本身。"
          },
          {
            "type": "fifo_t*",
            "name": "fifo",
            "desc": "fifo对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "需要更改的起始位置。"
          },
          {
            "type": "const void*",
            "name": "data",
            "desc": "新数据。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "新数据的数量。"
          },
          {
            "type": "uint32_t",
            "name": "update_max",
            "desc": "同时更新的最大数量。"
          }
        ],
        "annotation": {},
        "desc": "设置fifo数据动画对象的参数。",
        "name": "chart_animator_fifo_value_set_params",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "chart_view/chart_animator.h",
    "desc": "chart动画。",
    "name": "chart_animator_t",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "series的显示模式。",
    "consts": [
      {
        "desc": "自动选择。",
        "name": "SERIES_DISPLAY_AUTO"
      },
      {
        "desc": "推进式（从右向左推进）。",
        "name": "SERIES_DISPLAY_PUSH"
      },
      {
        "desc": "覆盖式（从左向右循环覆盖, 类似心电图）。",
        "name": "SERIES_DISPLAY_PUSH"
      }
    ],
    "header": "chart_view/series_types.h",
    "name": "series_dispaly_mode_t",
    "prefix": "SERIES_DISPLAY_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "style常量定义。",
    "consts": [
      {
        "desc": "序列形成的曲线边框颜色",
        "name": "STYLE_ID_SERIES_LINE_BORDER_COLOR"
      },
      {
        "desc": "序列形成的曲线边框宽度",
        "name": "STYLE_ID_SERIES_LINE_BORDER_WIDTH"
      },
      {
        "desc": "序列的曲线与轴围成的区域颜色",
        "name": "STYLE_ID_SERIES_AREA_COLOR"
      },
      {
        "desc": "序列点的标记边框颜色",
        "name": "STYLE_ID_SERIES_SYMBOL_BORDER_COLOR"
      },
      {
        "desc": "序列点的标记颜色",
        "name": "STYLE_ID_SERIES_SYMBOL_BG_COLOR"
      },
      {
        "desc": "序列点的标记边框宽度",
        "name": "STYLE_ID_SERIES_SYMBOL_BORDER_WIDTH"
      },
      {
        "desc": "序列点的标记图片",
        "name": "STYLE_ID_SERIES_SYMBOL_IMAGE"
      },
      {
        "desc": "序列的曲线与轴围成的平滑区域颜色",
        "name": "STYLE_ID_SERIES_SMOOTH_AREA_COLOR"
      }
    ],
    "header": "chart_view/series_types.h",
    "name": "style_id_series_t",
    "prefix": "STYLE_ID_SERIES_",
    "annotation": {
      "scriptable": true,
      "string": true
    },
    "level": 1
  },
  {
    "type": "enum",
    "desc": "指示序列点位置的线。",
    "consts": [],
    "header": "chart_view/tooltip_types.h",
    "name": "tooltip_line_params_t",
    "prefix": "TOOLTIP_LINE_PARAMS_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "指示序列点位置的点。",
    "consts": [],
    "header": "chart_view/tooltip_types.h",
    "name": "tooltip_symbol_params_t",
    "prefix": "TOOLTIP_SYMBOL_PARAMS_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "提示文本。",
    "consts": [],
    "header": "chart_view/tooltip_types.h",
    "name": "tooltip_tip_params_t",
    "prefix": "TOOLTIP_TIP_PARAMS_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "style常量定义。",
    "consts": [
      {
        "desc": "指示序列点位置的点的边框颜色",
        "name": "STYLE_ID_TOOLTIP_SYMBOL_BORDER_COLOR"
      },
      {
        "desc": "指示序列点位置的点的边框宽度",
        "name": "STYLE_ID_TOOLTIP_SYMBOL_BORDER_WIDTH"
      },
      {
        "desc": "指示序列点位置的点的颜色",
        "name": "STYLE_ID_TOOLTIP_SYMBOL_COLOR"
      },
      {
        "desc": "提示信息框的边框颜色",
        "name": "STYLE_ID_TOOLTIP_BORDER_COLOR"
      },
      {
        "desc": "提示信息框的背景颜色",
        "name": "STYLE_ID_TOOLTIP__BG_COLOR"
      },
      {
        "desc": "提示信息框的边框宽度",
        "name": "STYLE_ID_TIP_BORDER_WIDTH"
      }
    ],
    "header": "chart_view/tooltip_types.h",
    "name": "style_tooltip_t",
    "prefix": "STYLE_ID_TOOLTIP_",
    "annotation": {
      "scriptable": true,
      "string": true
    },
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "widget的父控件。"
          },
          {
            "type": "const widget_vtable_t*",
            "name": "vt",
            "desc": "虚函数表。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {},
        "desc": "创建对象。\n\n> 仅供子类调用。",
        "name": "series_create",
        "return": {
          "type": "widget_t*",
          "desc": "widget对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取series的当前点数。",
        "name": "series_count",
        "return": {
          "type": "uint32_t",
          "desc": "当前点数。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "序列点在fifo中的位置。"
          },
          {
            "type": "const void*",
            "name": "data",
            "desc": "序列点数据。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "序列点数量。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定位置的序列点。",
        "name": "series_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "序列点在fifo中的位置。"
          },
          {
            "type": "const void*",
            "name": "data",
            "desc": "序列点数据。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "序列点数量。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置指定位置（反向）的序列点。",
        "name": "series_rset",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "const void*",
            "name": "data",
            "desc": "序列点数据。"
          },
          {
            "type": "uint32_t",
            "name": "nr",
            "desc": "序列点数量。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "在尾巴追加多个序列点。",
        "name": "series_push",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "序列点在fifo中的位置。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "返回特定位置的序列点数据。",
        "name": "series_at",
        "return": {
          "type": "void*",
          "desc": "如果找到，返回特定位置的序列点数据，否则返回NULL。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "uint32_t*",
            "name": "begin",
            "desc": "起始点fifo中的位置。"
          },
          {
            "type": "uint32_t*",
            "name": "end",
            "desc": "结束点fifo中的位置。"
          },
          {
            "type": "uint32_t*",
            "name": "middle",
            "desc": "中间点fifo中的位置。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "返回当前显示序列点的位置。",
        "name": "series_get_current",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "bool_t",
            "name": "is_local",
            "desc": "TRUE表示是相对与控件左上角的坐标，否则表示全局坐标。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "判断一个点是否在series显示区域内。",
        "name": "series_is_point_in",
        "return": {
          "type": "bool_t",
          "desc": "返回是否在series显示区域内。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "bool_t",
            "name": "is_local",
            "desc": "TRUE表示是相对与控件左上角的坐标，否则表示全局坐标。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "返回距离一个点最近的序列点的索引。",
        "name": "series_index_of_point_in",
        "return": {
          "type": "int32_t",
          "desc": "返回fifo中的位置。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "序列点在fifo中的位置。"
          },
          {
            "type": "point_t*",
            "name": "p",
            "desc": "坐标点。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "返回指定序列点在控件内的本地坐标，即相对于控件左上角的坐标。",
        "name": "series_to_local",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "series_tooltip_format_t",
            "name": "format",
            "desc": "提示信息格式化回调。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "格式化时的上下文。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置提示信息格式化。",
        "name": "series_set_tooltip_format",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "序列点在fifo中的位置。"
          },
          {
            "type": "wstr_t*",
            "name": "v",
            "desc": "提示信息。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取指定序列点的提示信息。",
        "name": "series_get_tooltip",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "uint32_t",
            "name": "capacity",
            "desc": "容量。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置fifo容量。",
        "name": "series_set_capacity",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "uint32_t",
            "name": "unit_size",
            "desc": "单个序列点数据的大小。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置单个序列点数据的大小。",
        "name": "series_set_unit_size",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "uint32_t",
            "name": "new_period",
            "desc": "新周期点数。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置序列的新周期点数。",
        "name": "series_set_new_period",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "const char*",
            "name": "title",
            "desc": "标题。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置标题。",
        "name": "series_set_title",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取标题。",
        "name": "series_get_title",
        "return": {
          "type": "wchar_t*",
          "desc": "返回文本。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "series_cast对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为series_cast对象(供脚本语言使用)。",
        "name": "series_cast",
        "return": {
          "type": "widget_t*",
          "desc": "series_cast对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "判断当前控件是否为series控件。",
        "name": "widget_is_series",
        "return": {
          "type": "bool_t",
          "desc": "返回当前控件是否为series控件。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "fifo",
        "desc": "数据fifo。",
        "type": "fifo_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "capacity",
        "desc": "fifo的容量。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "unit_size",
        "desc": "fifo元素的大小。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "offset",
        "desc": "fifo的偏移量。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "display_mode",
        "desc": "显示模式。",
        "type": "series_dispaly_mode_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "animation",
        "desc": "播放值更新动画。0表示禁止，非0表示动画持续事件。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "tooltip_format",
        "desc": "提示信息格式化。",
        "type": "series_tooltip_format_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "tooltip_format_ctx",
        "desc": "提示信息格式化的上下文。",
        "type": "void*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "vt",
        "desc": "虚函数表。",
        "type": "series_vtable_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "need_reset_fifo",
        "desc": "是否需要重置数据fifo。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "need_reset_fifo",
        "desc": "是否已初始化。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "new_period",
        "desc": "序列的新周期点数。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "chart_view/series.h",
    "desc": "序列控件。",
    "name": "series_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建chart_view_对象",
        "name": "chart_view_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "index",
            "desc": "series索引。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置需置顶的series的索引。",
        "name": "chart_view_set_top_series",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "chart_view对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换chart_view对象(供脚本语言使用)。",
        "name": "chart_view_cast",
        "return": {
          "type": "widget_t*",
          "desc": "chart_view对象。"
        }
      },
      {
        "params": [],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "注册chart_view控件。",
        "name": "chart_view_s_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "top_series",
        "desc": "位于顶层的series的索引。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "chart_view/chart_view.h",
    "desc": "chart view\n\n在xml中使用\"chart\\_view\"标签创建扩展按钮控件。如：\n\n```xml\n<!-- ui -->\n<chart_view x=\"c\" y=\"50\" w=\"200\" h=\"100\" />\n```\n\n可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\n\n```xml\n<!-- style -->\n<chart_view>\n<style name=\"default\">\n<normal margin_bottom=\"20\" margin_left=\"55\" margin_right=\"55\" margin_top=\"20\"/>\n</style>\n</chart_view>\n```",
    "name": "chart_view_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建line_series对象",
        "name": "line_series_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建彩色line_series对象",
        "name": "line_series_colorful_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "line_series对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为line_series对象(供脚本语言使用)。",
        "name": "line_series_cast",
        "return": {
          "type": "widget_t*",
          "desc": "line_series对象。"
        }
      },
      {
        "params": [],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "注册line_series控件。",
        "name": "line_series_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "注册line_series_colorful控件。",
        "name": "line_series_colorful_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "series_axis",
        "desc": "标示序列位置的轴。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "value_axis",
        "desc": "标示序列值的轴。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "chart_view/line_series.h",
    "desc": "线形序列。\n\n在xml中使用\"line\\_series\"标签创建扩展按钮控件。如：\n\n```xml\n<!-- ui -->\n<line_series x=\"c\" y=\"50\" w=\"200\" h=\"100\" />\n```\n\n可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\n\n```xml\n<!-- style -->\n<line_series>\n<style name=\"default\">\n<normal line_border_color=\"#69cf5c\" line_border_width=\"1\"   area_color=\"#69CF5C66\"  smooth_area_color=\"#69CF5C66\" symbol_border_color=\"#FFC393\" symbol_color=\"#69CF5C\"/>\n</style>\n</line_series>\n<line_series_colorful>\n<style name=\"default\">\n<normal line_border_color=\"#69cf5c\" line_border_width=\"1\"   area_color=\"#69cf5c66\"  smooth_area_color=\"#69CF5C66\" symbol_border_color=\"#FFC393\" symbol_color=\"#69CF5C\"/>\n</style>\n</line_series_colorful>\n```",
    "name": "line_series_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建pie_slice对象",
        "name": "pie_slice_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "pie_slice对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为pie_slice对象(供脚本语言使用)。",
        "name": "pie_slice_cast",
        "return": {
          "type": "widget_t*",
          "desc": "pie_slice对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "float_t",
            "name": "value",
            "desc": "值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置值。",
        "name": "pie_slice_set_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "max",
            "desc": "最大值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置最大值。",
        "name": "pie_slice_set_max",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "uint32_t",
            "name": "inner_radius",
            "desc": "环线的厚度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置环线的厚度。",
        "name": "pie_slice_set_inner_radius",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "int32_t",
            "name": "start_angle",
            "desc": "起始角度。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置起始角度。",
        "name": "pie_slice_set_start_angle",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "const char*",
            "name": "unit",
            "desc": "单位。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置单位。",
        "name": "pie_slice_set_unit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "show_text",
            "desc": "是否显示文本。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否显示文本。",
        "name": "pie_slice_set_show_text",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "is_exploded",
            "desc": "是否扩展。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否显示扩展。",
        "name": "pie_slice_set_is_exploded",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "counter_clock_wise",
            "desc": "是否为逆时针方向。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否为逆时针方向。",
        "name": "pie_slice_set_counter_clock_wise",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "bool_t",
            "name": "is_semicircle",
            "desc": "是否为逆时针方向。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否为拱形。",
        "name": "pie_slice_set_semicircle",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "扩展扇形。",
        "name": "pie_slice_set_exploded",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "点击该扇形扩展，其他扇形回归到原点。",
        "name": "pie_slice_set_exploded_4_others",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "扩展或者还原全部扇形",
        "name": "pie_slice_set_exploded_4_all",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "注册pie_slice控件。",
        "name": "pie_slice_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [
      {
        "name": "EVT_VALUE_WILL_CHANGE",
        "desc": "值即将改变事件。",
        "type": "event_t"
      },
      {
        "name": "EVT_VALUE_CHANGED",
        "desc": "值改变事件。",
        "type": "event_t"
      }
    ],
    "properties": [
      {
        "name": "value",
        "desc": "值(缺省为0)。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "max",
        "desc": "最大值(缺省为100)。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "start_angle",
        "desc": "起始角度(单位为度，缺省-90)。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "inner_radius",
        "desc": "环线的厚度(缺省为8)。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "unit",
        "desc": "单元(缺省无)。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "counter_clock_wise",
        "desc": "是否为逆时针方向(缺省为FALSE)。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "show_text",
        "desc": "是否显示文本(缺省为TRUE)。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "is_exploded",
        "desc": "是否扩展扇形(缺省为FALSE)。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "explode_distancefactor",
        "desc": "扩展距离。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "x_to",
        "desc": "扩展距离后x坐标。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "y_to",
        "desc": "扩展距离后y坐标。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "pressed",
        "desc": "是否按下鼠标。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "is_semicircle",
        "desc": "是否画拱形。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "pie_slice/pie_slice.h",
    "desc": "进度圆环控件。\n\n在xml中使用\"pie\\_slice\"标签创建扩展按钮控件。如：\n\n```xml\n<!-- ui -->\n<pie_slice x=\"c\" y=\"50\" w=\"100\" h=\"100\" />\n```\n\n可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\n\n```xml\n<!-- style -->\n<pie_slice>\n<style name=\"default\">\n<normal fg_color=\"#000000\" text_color=\"#008000\"/>\n</style>\n</pie_slice>\n```",
    "name": "pie_slice_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "widget的父控件。"
          },
          {
            "type": "const widget_vtable_t*",
            "name": "vt",
            "desc": "虚函数表。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {},
        "desc": "创建对象。\n\n> 仅供子类调用。",
        "name": "axis_create",
        "return": {
          "type": "widget_t*",
          "desc": "widget对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {},
        "desc": "销毁对象时的处理。\n\n> 仅供子类调用。",
        "name": "axis_on_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "float_t",
            "name": "min",
            "desc": "最小值。"
          },
          {
            "type": "float_t",
            "name": "max",
            "desc": "最大值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置坐标轴的刻度范围。",
        "name": "axis_set_range",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "bool_t",
            "name": "is_series_axis",
            "desc": "是否为指示序列位置的轴"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "获取坐标轴的刻度范围。",
        "name": "axis_get_range",
        "return": {
          "type": "float_t",
          "desc": "刻度范围。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "const char*",
            "name": "data",
            "desc": "显示值。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置坐标轴的刻度显示值。",
        "name": "axis_set_data",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          },
          {
            "type": "axis_data_from_series_t",
            "name": "from_series",
            "desc": "生成回调。"
          },
          {
            "type": "void*",
            "name": "ctx",
            "desc": "上下文。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置坐标轴的刻度显示值的生成器。",
        "name": "axis_set_data_from_series",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置需要更新坐标轴的刻度显示值。",
        "name": "axis_set_need_update_data",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "axis_base对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为axis_base对象(供脚本语言使用)。",
        "name": "axis_cast",
        "return": {
          "type": "widget_t*",
          "desc": "axis_base对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "判断当前控件是否为axis控件。",
        "name": "widget_is_axis",
        "return": {
          "type": "bool_t",
          "desc": "返回当前控件是否为axis控件。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "type",
        "desc": "类型。",
        "type": "axis_type_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "at",
        "desc": "位置。",
        "type": "axis_at_type_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "min",
        "desc": "最小刻度。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "max",
        "desc": "最大刻度。",
        "type": "float_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "data",
        "desc": "刻度数据。",
        "type": "darray_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "data_from_series",
        "desc": "刻度数据的生成器。",
        "type": "axis_data_from_series_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "data_from_series_ctx",
        "desc": "刻度数据生成时的上下文。",
        "type": "void*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "offset",
        "desc": "偏移位置。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "offset_percent",
        "desc": "偏移位置是否为百分比值。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "inverse",
        "desc": "是否反向",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "data_fixed",
        "desc": "刻度数据是否固定。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "need_update_data",
        "desc": "刻度数据是否需要更新。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "painted_before",
        "desc": "是否需要在绘制前做额外处理。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "vt",
        "desc": "虚函数表。",
        "type": "series_vtable_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "chart_view/axis.h",
    "desc": "坐标轴控件。",
    "name": "axis_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "widget的父控件。"
          },
          {
            "type": "const widget_vtable_t*",
            "name": "vt",
            "desc": "虚函数表。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标。"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标。"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度。"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度。"
          }
        ],
        "annotation": {},
        "desc": "创建对象。\n\n> 仅供子类调用。",
        "name": "tooltip_create",
        "return": {
          "type": "widget_t*",
          "desc": "widget对象本身。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建tooltip对象",
        "name": "tooltip_create_default",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "移动tooltip。",
        "name": "tooltip_move",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "tooltip_base对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为tooltip_base对象(供脚本语言使用)。",
        "name": "tooltip_cast",
        "return": {
          "type": "widget_t*",
          "desc": "tooltip_base对象。"
        }
      },
      {
        "params": [],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "注册tooltip控件。",
        "name": "tooltip_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "判断当前控件是否为tooltip控件。",
        "name": "widget_is_tooltip",
        "return": {
          "type": "bool_t",
          "desc": "返回当前控件是否为tooltip控件。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "chart_view/tooltip.h",
    "desc": "提示信息控件。\n\n在xml中使用\"tooltip\"标签创建扩展按钮控件。如：\n\n```xml\n<!-- ui -->\n<tooltip x=\"c\" y=\"50\" w=\"100\" h=\"100\" />\n```\n\n可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\n\n```xml\n<!-- style -->\n<tooltip>\n<style name=\"default\">\n<normal fg_color=\"#ffffff\" symbol_border_color=\"#007acc\" symbol_border_width=\"3\" symbol_color=\"#ffffff\"  tip_bg_color=\"#ffffff80\" tip_border_color=\"#ffffff\" tip_border_width=\"3\" margin=\"4\" text_color=\"#ffffff\"/>\n</style>\n</tooltip>\n```",
    "name": "tooltip_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建axis对象",
        "name": "x_axis_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "axis对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为axis对象(供脚本语言使用)。",
        "name": "x_axis_cast",
        "return": {
          "type": "widget_t*",
          "desc": "axis对象。"
        }
      },
      {
        "params": [],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "注册x_axis控件。",
        "name": "x_axis_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "x_defined",
        "desc": "x坐标是否确定。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "w_defined",
        "desc": "w宽度是否确定。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "chart_view/x_axis.h",
    "desc": "x坐标轴控件。\n\n在xml中使用\"x\\_axis\"标签创建扩展按钮控件。如：\n\n```xml\n<!-- ui -->\n<x_axis x=\"c\" y=\"50\" w=\"2\" h=\"100\" />\n```\n\n可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\n\n```xml\n<!-- style -->\n<x_axis>\n<style name=\"default\">\n<normal text_color=\"#a1d8ef\" font_size=\"20\" split_line_color=\"#213b4d\" tick_color=\"#294b63\" fg_color=\"#294b63\" />\n</style>\n</x_axis>\n```",
    "name": "x_axis_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建axis对象",
        "name": "y_axis_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "axis对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为axis对象(供脚本语言使用)。",
        "name": "y_axis_cast",
        "return": {
          "type": "widget_t*",
          "desc": "axis对象。"
        }
      },
      {
        "params": [],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "注册y_axis控件。",
        "name": "y_axis_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "y_defined",
        "desc": "y坐标是否确定。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "h_defined",
        "desc": "h高度是否确定。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "chart_view/y_axis.h",
    "desc": "y坐标轴控件。\n\n在xml中使用\"y\\_axis\"标签创建扩展按钮控件。如：\n\n```xml\n<!-- ui -->\n<y_axis x=\"c\" y=\"50\" w=\"2\" h=\"100\" />\n```\n\n可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\n\n```xml\n<!-- style -->\n<y_axis>\n<style name=\"default\">\n<normal text_color=\"#a1d8ef\" font_size=\"20\" split_line_color=\"#213b4d\" tick_color=\"#294b63\" fg_color=\"#294b63\" />\n</style>\n</y_axis>\n```",
    "name": "y_axis_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建bar_series对象",
        "name": "bar_series_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建bar_series_minmax对象（同时显示最大最小值）",
        "name": "bar_series_minmax_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "bar_series对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为bar_series对象(供脚本语言使用)。",
        "name": "bar_series_cast",
        "return": {
          "type": "widget_t*",
          "desc": "bar_series对象。"
        }
      },
      {
        "params": [],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "注册bar_series控件。",
        "name": "bar_series_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "scriptable": true,
          "static": true
        },
        "desc": "注册bar_series_minmax控件。",
        "name": "bar_series_minmax_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "series_axis",
        "desc": "标示序列位置的轴。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      },
      {
        "name": "value_axis",
        "desc": "标示序列值的轴。",
        "type": "char*",
        "annotation": {
          "set_prop": true,
          "get_prop": true,
          "readable": true,
          "persitent": true,
          "design": true,
          "scriptable": true
        }
      }
    ],
    "header": "chart_view/bar_series.h",
    "desc": "柱条序列。\n\n在xml中使用\"bar\\_series\"标签创建扩展按钮控件。如：\n\n```xml\n<!-- ui -->\n<bar_series x=\"c\" y=\"50\" w=\"200\" h=\"100\" />\n```\n\n可用通过style来设置控件的显示风格，如字体的大小和颜色等等。如：\n\n```xml\n<!-- style -->\n<bar_series>\n<style name=\"default\">\n<normal margin_bottom=\"1\" margin_left=\"20\" margin_right=\"2\" margin_top=\"3\" fg_color=\"#69CF5C\"/>\n</style>\n<bar_series_minmax>\n<style name=\"default\">\n<normal margin_bottom=\"1\" margin_left=\"20\" margin_right=\"2\" margin_top=\"3\" fg_color=\"#36B3C3\"/>\n</style>\n</bar_series_minmax>\n```",
    "name": "bar_series_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  }
]